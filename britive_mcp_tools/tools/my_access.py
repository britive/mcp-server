import datetime

from britive.exceptions import UnauthorizedRequest

from .britive_mcp_tools.core.mcp_init import client_wrapper, mcp


@mcp.tool(
    name="my_access_checkout",
    description="""Use this tool when the user is denied access via MCP (e.g., 'access denied', 'not authorized') or implicitly indicates they can't access something they should. Also trigger if the user says 'need access', 'get access', or refers to Britive access. Prefer silent inference of 'profile_id' and 'environment_id' from prior context or conversation;Ask only if unclear. Set 'programmatic=False' unless programmatic access is explicitly mentioned.Include 'justification' only if needed for approval (e.g., access typically restricted or user says 'need approval'). Use 'include_credentials=True' only if the user expects immediate use. Handle approval flows quietly, inform the user once if there's a delay, but avoid repeated updates unless asked. Accept optional 'ticket_id', 'ticket_type', or 'otp' if context provides them. Do not try to guess these parameters if not mentioned by the user or in the context. You can find the profile and environment IDs by using the `list_profiles` tool.If access was already granted, return it silently. If failure occurs (rejection, timeout, withdrawal), notify with minimal friction. Never use this tool when the user is only inquiring about existing access or wanting to check in access.Before attempting a checkout, try to execute the prompt. If the execution fails try a checkout, but ensure thatleast privilege access is used. As an example, if the needed permissions for the prompt require read only accessjust checkout the profile for read only access. Only do administrator when needed.""",
)
def my_access_checkout(
    profile_id: str,
    environment_id: str,
    include_credentials: bool = False,
    justification: str = None,
    max_wait_time: int = 600,
    otp: str = None,
    programmatic: bool = True,
    ticket_id: str = None,
    ticket_type: str = None,
    wait_time: int = 60,
):
    # This tool is generated using Britive SDK v4.3.0
    """Checkout a profile.

    If the profile has already been checked out this method will return the details of the checked out profile.

    If approval is required, this method will continue to check if approval has been obtained. Once the request
    is approved the profile will be checked out. Sending a `SIGINT/KeyboardInterrupt/Ctrl+C/^C` while waiting for
    the approval request to be dispositioned will withdraw the request. Sending a second `^C` immediately after
    the first will immediately exit the program.

    :param profile_id: The ID of the profile. Use `list_profiles()` to obtain the eligible profiles.
    :param environment_id: The ID of the environment. Use `list_profiles()` to obtain the eligible environments.
    :param include_credentials: True if tokens should be included in the response. False if the caller wishes to
        call `credentials()` at a later time. If True, the `credentials` key will be included in the response which
        contains the response from `credentials()`. Setting this parameter to `True` will result in a synchronous
        call vs. setting to `False` will allow for an async call.
    :param justification: Optional justification if checking out the profile requires approval.
    :param max_wait_time: The maximum number of seconds to wait for an approval before throwing
        an exception.
    :param otp: Optional time based one-time passcode use for step up authentication.
    :param programmatic: True for programmatic credential checkout. False for console checkout.
    :param progress_func: An optional callback that will be invoked as the checkout process progresses.
    :param ticket_id: Optional ITSM ticket ID
    :param ticket_type: Optional ITSM ticket type or category
    :param wait_time: The number of seconds to sleep/wait between polling to check if the profile checkout
        was approved.
    :return: Details about the checked out profile, and optionally the credentials generated by the checkout.
    :raises ApprovalRequiredButNoJustificationProvided: if approval is required but no justification is provided.
    :raises ProfileApprovalRejected: if the approval request was rejected by the approver.
    :raises ProfileApprovalTimedOut: if the approval request timed out exceeded the max time as specified by the
        profile policy.
    :raises ProfileApprovalWithdrawn: if the approval request was withdrawn by the requester."""

    try:
        client = client_wrapper.get_client()
        return client.my_access.checkout(
            profile_id,
            environment_id,
            include_credentials,
            justification,
            max_wait_time,
            otp,
            programmatic,
            None,
            ticket_id,
            ticket_type,
            wait_time,
        )
    except UnauthorizedRequest:
        raise UnauthorizedRequest(
            "User is not authenticated. Please ask the user to run `pybritive login` in their terminal to log in interactively. "
            "After the user finishes logging in, ask them to confirm so you can retry this tool."
        )


@mcp.tool(
    name="my_access_checkin",
    description="""Use this tool when the user has completed their task or explicitly indicates they no longer need access(e.g., 'done with access', 'you can check it in', 'I'm finished', or 'revoke access').It is also appropriate to suggest check-in if the user asks what access they currently have and chooses to release it.If multiple profiles were checked out, ensure all are checked in, not just the most recent one. Prefer silent handling unless the user expects confirmation.The only required input is the 'transaction_id' of the profile that was previously checked out.If not already tracked or known from context, ask the user briefly.Do not invoke this tool preemptively unless the user's intent to end access is clear.If you are asking to checkin everything, use this tool, not the active session tools.""",
)
def my_access_checkin(transaction_id: str):
    # This tool is generated using Britive SDK v4.3.0
    """Check in a checked out profile.

    :param transaction_id: The ID of the transaction.
    :return: Details of the checked in profile."""

    try:
        client = client_wrapper.get_client()
        return client.my_access.checkin(transaction_id)
    except UnauthorizedRequest:
        raise UnauthorizedRequest(
            "User is not authenticated. Please ask the user to run `pybritive login` in their terminal to log in interactively. "
            "After the user finishes logging in, ask them to confirm so you can retry this tool."
        )


@mcp.tool(
    name="my_access_list_profiles",
    description="""List all profiles available for checkout. This tool is useful for understanding what access options are available to the user. It can also be used to find the profile and environment IDs needed for the `checkout` tool. This tool does not require any parameters and will return a list of profiles with their details.""",
)
def my_access_list_profiles():
    # This tool is generated using Britive SDK v4.3.0
    """List the profiles for which the user has access.

    :return: List of profiles."""

    try:
        client = client_wrapper.get_client()
        return client.my_access.list_profiles()
    except UnauthorizedRequest:
        raise UnauthorizedRequest(
            "User is not authenticated. Please ask the user to run `pybritive login` in their terminal to log in interactively. "
            "After the user finishes logging in, ask them to confirm so you can retry this tool."
        )


@mcp.tool(
    name="my_access_whoami",
    description="""
Use this tool to retrieve details of the currently authenticated identity (user or service). 
It returns information like username, type (user/service), and any other associated metadata.

When to Use:
- When the user asks questions like:
  - "Who am I?"
  - "What user is currently logged in?"
  - "Tell me about my account"
  - "What is my identity?"

- When the user refers to themselves using:
  - Words like "I", "me", "my", "mine"
  - Phrases that imply a self-reference (e.g., "my secrets", "my roles", "my entitlements")

- When another tool requires an identity as input, but the user did not specify one.
  - In such cases, use `whoami` first to fetch the identity, and then pass it to the next tool.

Constraints:
- Only use this tool when the user is referring to themselves.
- Do **not** use this tool when the user is asking about someone else.""",
)
def my_access_whoami():
    # This tool is generated using Britive SDK v4.3.0
    """Return details about the currently authenticated identity (user or service).

    :return: Details of the currently authenticated identity."""

    try:
        client = client_wrapper.get_client()
        return client.my_access.whoami()
    except UnauthorizedRequest:
        raise UnauthorizedRequest(
            "User is not authenticated. Please ask the user to run `pybritive login` in their terminal to log in interactively. "
            "After the user finishes logging in, ask them to confirm so you can retry this tool."
        )
